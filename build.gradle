plugins {
    id 'groovy'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
}

group = 'br.com.danielcesario.myprojecmanager'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    test {
        groovy {
            srcDirs = ['src/test/groovy']
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'br.com.six2six:fixture-factory:3.1.0'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
    implementation 'org.codehaus.groovy:groovy-all:2.5.14'
    testImplementation 'com.athaydes:spock-reports:1.8.0', { transitive = false }
}

test {
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', true
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
    finalizedBy jacocoTestReport
}

check {
    dependsOn jacocoTestCoverageVerification
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.from(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'br/com/danielcesario/myprojecmanager/core/MyProjectManagerApplication'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [
                    'br.com.danielcesario.myprojecmanager.core.MyProjectManagerApplication'
            ]
        }
    }
}